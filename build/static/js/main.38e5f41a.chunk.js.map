{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","net","video","eyeAction","leftHandAction","rightHandAction","text","images","dragon","rainbow","man","this","loadBodyPix","document","getElementById","style","display","loadVideo","segmentBodyInRealTime","className","id","playsInline","transform","renderSongs","src","alt","bodyPix","architecture","outputStride","multiplier","quantBytes","setState","navigator","mediaDevices","getUserMedia","Error","videoElement","stream","srcObject","Promise","resolve","onloadedmetadata","width","videoWidth","height","videoHeight","cameraLabel","setUpCamera","info","textContent","play","canvas","estimateSegmentation","multiPersonSegmentation","ctx","getContext","foregroundColor","r","g","b","a","backgroundColor","mask","drawPoses","requestAnimationFrame","bind","segmentMultiPerson","internalResolution","segmentationThreshold","maxDetections","scoreThreshold","nmsRadius","numKeypointForMatching","refineSteps","personOrPersonPartSegmentation","flipHorizontally","Array","isArray","forEach","personSegmentation","pose","showPoses","keypoints","drawKeypoints","allPoses","minConfidence","scale","i","length","keypoint","score","position","y","x","drawPoint","setPoseStatus","part","drawImage","val","color","beginPath","arc","Math","PI","fillStyle","fill","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38e5f41a.chunk.js","sourcesContent":["import React from 'react';\nimport * as bodyPix from '@tensorflow-models/body-pix';\nimport Stats from 'stats.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      net: {},\n      video: {},\n      eyeAction: false,\n      leftHandAction: false,\n      rightHandAction: false,\n      text: '',\n      images: {\n        dragon: 'https://i.postimg.cc/qMBfxc8F/dragon.png',\n        rainbow: 'https://i.postimg.cc/85Twg4PQ/image.png',\n        man: 'https://i.postimg.cc/yNs0Ddq0/image.jpg',\n      }\n    }\n  }\n  async componentDidMount() {\n    await this.loadBodyPix()\n    document.getElementById('loading').style.display = 'none';\n    document.getElementById('main').style.display = 'inline-block';\n    await this.loadVideo();\n    this.segmentBodyInRealTime()\n  }\n  render() {\n    const {  dragon, rainbow, man } = this.state.images\n    return (\n      <div className=\"App\">\n        <div id=\"stats\"> </div>{' '}\n        <div\n          id=\"info\"\n          style={{\n            display: 'none',\n          }}\n        />{' '}\n        <div\n          id=\"loading\"\n          style={{\n            display: 'flex',\n          }}\n        >\n          <div className=\"spinner-text\">Loading BodyPix model...</div>{' '}\n          <div className=\"sk-spinner sk-spinner-pulse\"> </div>{' '}\n        </div>{' '}\n        <div\n          id=\"main\"\n          style={{\n            display: 'none',\n          }}\n        >\n          <video\n            id=\"video\"\n            playsInline\n            style={{\n              'MozTransform': 'scaleX(-1)',\n              'OTransform': 'scaleX(-1)',\n              'WebkitTransform': 'scaleX(-1)',\n              transform: 'scaleX(-1)',\n              display: 'none',\n            }}\n          />{' '}\n          <canvas id=\"output\" />\n        </div>\n        <div>\n            {this.renderSongs() }\n        </div>\n        <div className=\"image\" style={{ display: 'none' }}>\n          <img src={dragon} alt=\"这是龙\" id=\"dragon\"/>\n          <img src={rainbow} alt=\"这是彩虹\" id=\"rainbow\" />\n        </div>\n      </div>\n    );\n  }\n  /**\n   * loadBodyfix\n   */\n  async loadBodyPix() {\n    const net = await bodyPix.load({\n      architecture: 'MobileNetV1',\n      outputStride: 16,\n      multiplier: 0.75,\n      quantBytes: 2\n    });\n    this.setState({ net })\n  }\n  /**\n   * 初始化camera\n   */\n  async setUpCamera() {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      throw new Error(\n        'Browser API navigator.mediaDevices.getUserMedia not available');\n    }\n    const videoElement = document.getElementById('video');\n\n    const stream = await navigator.mediaDevices.getUserMedia(\n      { 'audio': false, 'video': true });\n    videoElement.srcObject = stream;\n\n    return new Promise((resolve) => {\n      videoElement.onloadedmetadata = () => {\n        videoElement.width = videoElement.videoWidth;\n        videoElement.height = videoElement.videoHeight;\n        resolve(videoElement);\n      };\n    });\n  }\n  /**\n   * 播放camera采集到的画面\n   */\n  async loadVideo(cameraLabel) {\n    let video;\n    try {\n      video = await this.setUpCamera(cameraLabel);\n      this.setState({ video })\n    } catch (e) {\n      let info = document.getElementById('info');\n      info.textContent = 'this browser does not support video capture,' +\n        'or this device does not have a camera';\n      info.style.display = 'block';\n      throw e;\n    }\n    video.play();\n  }\n  /**\n   * 识别身体并画上蒙层\n   */\n  async segmentBodyInRealTime() {\n    const canvas = document.getElementById('output');\n    const multiPersonSegmentation = await this.estimateSegmentation();\n    const ctx = canvas.getContext('2d');\n    const foregroundColor = { r: 255, g: 255, b: 255, a: 255 };\n    const backgroundColor = { r: 0, g: 0, b: 0, a: 255 };\n    /**\n     * bodyPix.toMask\n     */\n    const mask = bodyPix.toMask(\n      multiPersonSegmentation, foregroundColor, backgroundColor,\n      true);\n    const flipHorizontally = true\n    const opacity = 0.5\n    const maskBlurAmount = 0\n    /**\n     * bodyPix.drawMask\n     * Draws an image onto a canvas and draws an ImageData containing \n     * a mask on top of it with a specified opacity;\n     */\n    bodyPix.drawMask(\n      canvas, this.state.video, mask, opacity,\n      maskBlurAmount, flipHorizontally);\n    this.drawPoses(multiPersonSegmentation, flipHorizontally, ctx);\n    requestAnimationFrame(this.segmentBodyInRealTime.bind(this))\n  }\n  async estimateSegmentation() {\n    return await this.state.net.segmentMultiPerson(this.state.video, {\n      internalResolution: 'medium',\n      segmentationThreshold: 0.7,\n      maxDetections: 5,\n      scoreThreshold: 0.3,\n      nmsRadius: 20,\n      numKeypointForMatching: 17,\n      refineSteps: 10\n    });\n  }\n  drawPoses(personOrPersonPartSegmentation, flipHorizontally, ctx) {\n    if (Array.isArray(personOrPersonPartSegmentation)) {\n      personOrPersonPartSegmentation.forEach(personSegmentation => {\n        let pose = personSegmentation.pose;\n        if (flipHorizontally) {\n          pose = bodyPix.flipPoseHorizontal(pose, personSegmentation.width);\n        }\n        this.showPoses(pose.keypoints, 0.3, ctx)\n        this.drawKeypoints(pose.keypoints, 0.1, ctx);\n      });\n    } else {\n      personOrPersonPartSegmentation.allPoses.forEach(pose => {\n        if (flipHorizontally) {\n          pose = bodyPix.flipPoseHorizontal(\n            pose, personOrPersonPartSegmentation.width);\n        }\n        this.drawKeypoints(pose.keypoints, 0.1, ctx);\n      })\n    }\n  }\n  drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n    for (let i = 0; i < keypoints.length; i++) {\n      const keypoint = keypoints[i];\n\n      if (keypoint.score < minConfidence) {\n        continue;\n      }\n\n      const { y, x } = keypoint.position;\n      this.drawPoint(ctx, y * scale, x * scale, 3, 'aqua');\n    }\n  }\n  showPoses(keypoints, minConfidence, ctx) {\n    for (let i = 0; i < keypoints.length; i++) {\n      const keypoint = keypoints[i];\n      /**\n       * 分数没有达到\n       */\n      if (keypoint.score < minConfidence) {\n        this.setPoseStatus(keypoint.part, false)\n      } else {\n        /**\n         * 分数满足\n         */\n        this.setPoseStatus(keypoint.part, true)\n        this.drawImage(keypoint, ctx)\n      }\n\n    }\n  }\n  /**\n   * pose状态\n   */\n  setPoseStatus(part, val) {\n    let { leftHandAction, rightHandAction } = this.state\n    switch (part) {\n      case 'rightWrist':\n        rightHandAction = val\n        break;\n      case 'leftWrist':\n        leftHandAction = val\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      leftHandAction,\n      rightHandAction\n    })\n  }\n\n  /**\n   * 画图形\n   */\n  drawImage(keypoint, ctx) {\n    switch (keypoint.part) {\n      case 'rightWrist':\n        const rainbow = document.getElementById(\"rainbow\");\n        ctx.drawImage(rainbow, keypoint.position.x - 50, keypoint.position.y, 120, 100)\n        break;\n      case 'leftWrist':\n        const dragon = document.getElementById(\"dragon\");\n        ctx.drawImage(dragon, keypoint.position.x - 50, keypoint.position.y - 20, 100, 100)\n        break;\n      default:\n        break;\n    }\n  }\n\n  drawPoint(ctx, y, x, r, color) {\n    ctx.beginPath();\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n  renderSongs() {\n    const { leftHandAction, rightHandAction } = this.state\n    if (leftHandAction) {\n      return '来左边儿 跟我一起画个龙'\n    } else if (rightHandAction) {\n      return '在你右边儿 画一道彩虹'\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}